<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.samples.microservices</groupId>
	<artifactId>sample-service</artifactId>
	<version>0.0.1</version>
	<packaging>jar</packaging>

	<name>sample-service</name>
	<description>Sample of a Microservice</description>

	<properties>
		<!-- general -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- java -->
		<java-source.version>11</java-source.version>
		<java-target.version>11</java-target.version>

		<!-- maven -->
		<maven-help-plugin.version>3.1.0</maven-help-plugin.version>
		<maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>
		<!--<maven-surefire-plugin.version>2.22.1</maven-surefire-plugin.version>-->
		<!--<maven-surefire-plugin.version>3.0.0-M1</maven-surefire-plugin.version>-->
		<!--<maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>-->
		<maven-site-plugin.version>3.7.1</maven-site-plugin.version>
		<maven-pmd-plugin.version>3.10.0</maven-pmd-plugin.version>
		<maven-findbugs-plugin.version>3.0.5</maven-findbugs-plugin.version>
		<xml-maven-plugin.version>1.0.2</xml-maven-plugin.version>
		<google-findbugs-xml-dependency.version>3.0.1</google-findbugs-xml-dependency.version>
		<maven-checkstyle-plugin.version>3.0.0</maven-checkstyle-plugin.version>
		<maven-surefire-report-plugin.version>2.22.1</maven-surefire-report-plugin.version>
		<jacoco-maven-plugin.version>0.8.2</jacoco-maven-plugin.version>
		<pitest-maven-plugin.version>1.4.3</pitest-maven-plugin.version>
		<sonar-maven-plugin-manag.version>3.5.0.1254</sonar-maven-plugin-manag.version>
		<maven-jxr-plugin.version>2.5</maven-jxr-plugin.version>
		<maven-project-info-reports-plugin.version>3.0.0</maven-project-info-reports-plugin.version>
		<javassist.version>3.23.1-GA</javassist.version>
		<mockito.version>2.20.0</mockito.version>
		<jaxb.version>2.3.0</jaxb.version>
		<javax.activation.version>1.1.1</javax.activation.version>

		<!-- spring -->
		<spring-boot.version>2.1.0.RELEASE</spring-boot.version>
		<!--<spring-cloud.version>Greenwich.RC2</spring-cloud.version>-->
		<spring-cloud.version>Greenwich.RELEASE</spring-cloud.version>

		<!-- swagger -->
		<swagger.version>2.9.2</swagger.version>

		<!-- logging -->
		<slf4.version>1.7.25</slf4.version>

		<!-- others -->
		<apache-commons-math.version>3.6.1</apache-commons-math.version>
		<apache-httpclient.version>4.5.6</apache-httpclient.version>
		<jackson.version>2.9.3</jackson.version>
		<lombok.version>1.18.2</lombok.version>

		<!-- testing -->
		<spring-cloud-contract.version>2.0.2.RELEASE</spring-cloud-contract.version>

		<!-- sonarqube configurations -->
		<sonar.host.url>http://sonarqube:9000</sonar.host.url>
		<sonar.login>analyser-user</sonar.login>
		<sonar.password>analyser-secret</sonar.password>
	</properties>

	<dependencies>
		<!-- spring -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-undertow</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<!-- swagger -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>${swagger.version}</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${swagger.version}</version>
		</dependency>

		<!-- logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4.version}</version>
		</dependency>

		<!-- others -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-math3</artifactId>
			<version>${apache-commons-math.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>${apache-httpclient.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
			<scope>provided</scope>
			<optional>true</optional>
		</dependency>

		<!-- testing -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!--
			PLEASE NOTE:
			This dependency includes a shaded uber jar which might cause
			some dependency conflicts with your compile classpath stuff.
			In that case you could configure the maven surefire plugin with exclusions
		-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-contract-stub-runner</artifactId>
			<version>${spring-cloud-contract.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-contract-verifier</artifactId>
			<version>${spring-cloud-contract.version}</version>
			<scope>test</scope>
		</dependency>
		<!--Java 11 dependencies-->
		<dependency>
			<groupId>org.javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>${javassist.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>${jaxb.version}</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-core</artifactId>
			<version>${jaxb.version}</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>${jaxb.version}</version>
		</dependency>
		<dependency>
			<groupId>javax.activation</groupId>
			<artifactId>activation</artifactId>
			<version>${javax.activation.version}</version>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<!-- spring -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring-boot.version}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
			<!-- spring-cloud -->
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<build>
		<!-- general -->
		<finalName>${project.artifactId}</finalName>

		<!-- plugins -->
		<plugins>
			<!-- maven-help -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-help-plugin</artifactId>
				<version>${maven-help-plugin.version}</version>
			</plugin>

			<!-- maven-compiler -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<fork>true</fork>
					<source>${java-source.version}</source>
					<target>${java-target.version}</target>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>

			<!-- maven-surefire -->
			<!-- PLEASE NOTE: Jenkins X does not accept version as property -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<!--<version>${maven-surefire-plugin.version}</version>-->
				<version>3.0.0-M1</version>
				<configuration>
					<systemPropertyVariables>
						<os.arch>x86_64</os.arch>
					</systemPropertyVariables>
				</configuration>
			</plugin>

			<!-- maven-deploy -->
			<!-- required by Jenkins X -->
			<!-- PLEASE NOTE: Jenkins X does not accept version as property -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<!--<version>${maven-deploy-plugin.version}</version>-->
				<version>2.8.2</version>
			</plugin>

			<!-- maven-site -->
			<!--
				PLEASE NOTE:
				Run this ONLY ON PURPOSE because it will take a lot of time downloading an enormous number of dependencies
			 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>${maven-site-plugin.version}</version>
			</plugin>

			<!-- spring-boot -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring-boot.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>build-info</goal>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<!-- Additional info added to Actuator info -->
							<additionalProperties>
								<java.source>${java-source.version}</java.source>
								<java.target>${java-target.version}</java.target>
								<build.encoding>${project.build.sourceEncoding}</build.encoding>
								<reporting.encoding>${project.reporting.outputEncoding}</reporting.encoding>
							</additionalProperties>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- spring-cloud-contrat-testing -->
			<!-- 
			<plugin>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-contract-maven-plugin</artifactId>
				<version>${spring-cloud-contract.version}</version>
				<extensions>true</extensions>
				<configuration>
					<nameSuffixForTests>ContractTest</nameSuffixForTests>
					<testMode>EXPLICIT</testMode>
				</configuration>
			</plugin>
			 -->

			<!-- pitest - mutation testing -->
			<plugin>
				<groupId>org.pitest</groupId>
				<artifactId>pitest-maven</artifactId>
				<version>${pitest-maven-plugin.version}</version>
				<configuration>
					<withHistory>true</withHistory>
					<timestampedReports>false</timestampedReports>
					<outputFormats>
						<outputFormat>HTML</outputFormat>
						<outputFormat>XML</outputFormat>
					</outputFormats>
					<failWhenNoMutations>true</failWhenNoMutations>
					<mutationThreshold>75</mutationThreshold>
					<avoidCallsTo>
						<avoidCallsTo>java</avoidCallsTo>
						<avoidCallsTo>org.apache</avoidCallsTo>
						<avoidCallsTo>org.slf4j</avoidCallsTo>
						<avoidCallsTo>org.eclipse</avoidCallsTo>
						<avoidCallsTo>lombok</avoidCallsTo>
						<avoidCallsTo>org.springframework</avoidCallsTo>
					</avoidCallsTo>
					<excludedClasses>
						<excludedClass>*constants*</excludedClass>
						<excludedClass>*domain*</excludedClass>
						<excludedClass>*entities*</excludedClass>
						<excludedClass>*daos*</excludedClass>
						<excludedClass>*dtos*</excludedClass>
						<excludedClass>*Mock*</excludedClass>
					</excludedClasses>
				</configuration>
			</plugin>

			<!-- surefire-report - testing report -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>${maven-surefire-report-plugin.version}</version>
			</plugin>

			<!-- jacoco - code coverage -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco-maven-plugin.version}</version>
				<configuration>
					<excludes>
						<exclude>**/constants/**/*</exclude>
						<exclude>**/domain/**/*</exclude>
						<exclude>**/entities/**/*</exclude>
						<exclude>**/daos/**/*</exclude>
						<exclude>**/dtos/**/*</exclude>
						<exclude>**/*Mock*.*</exclude>
					</excludes>
					<!-- see https://www.eclemma.org/jacoco/trunk/doc/check-mojo.html -->
					<rules>
						<rule>
							<element>PACKAGE</element>
							<excludes>
								<exclude>*Test</exclude>
							</excludes>
							<limits>
								<limit>
									<counter>LINE</counter>
									<value>COVEREDRATIO</value>
									<minimum>0.75</minimum>
								</limit>
							</limits>
						</rule>
					</rules>
				</configuration>
				<executions>
					<!--
						Execution always required to prepare a property pointing to the JaCoCo runtime agent that
						can be passed as a VM argument to the application under test.
					 -->
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- pmd - source code analyser -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>${maven-pmd-plugin.version}</version>
				<configuration>
					<failOnViolation>true</failOnViolation>
					<rulesets>
						<ruleset>/category/java/bestpractices.xml</ruleset>
						<ruleset>/category/java/codestyle.xml</ruleset>
						<ruleset>/category/java/design.xml</ruleset>
						<ruleset>/category/java/errorprone.xml</ruleset>
						<ruleset>/category/java/multithreading.xml</ruleset>
						<ruleset>/category/java/performance.xml</ruleset>
					</rulesets>
				</configuration>
			</plugin>

			<!-- findbugs - static analysis -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>${maven-findbugs-plugin.version}</version>
				<configuration>
					<!--
						Enables analysis which takes more memory but finds more bugs.
						If you run out of memory, changes the value of the effort element to 'Low'.
					 -->
					<effort>Max</effort>
					<!-- Bugs report level. Available values: Low (all), Medium (normal), Max (most important) -->
					<threshold>Low</threshold>
					<failOnError>true</failOnError>
					<onlyAnalyze>org.samples.microservices.sample.*</onlyAnalyze>
					<!-- PLEASE NOTE: Customized in order to let the XSLT plugin to translate XML to HTML -->
					<findbugsXmlOutputDirectory>${project.build.directory}/findbugs/xml</findbugsXmlOutputDirectory>
				</configuration>
			</plugin>
			<!-- PLEASE NOTE: required to transform FindBugs report from XML to HTML -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>xml-maven-plugin</artifactId>
				<version>${xml-maven-plugin.version}</version>
				<configuration>
					<transformationSets>
						<transformationSet>
							<dir>${project.build.directory}/findbugs/xml</dir>
							<outputDir>${project.build.directory}/findbugs/html</outputDir>
							<stylesheet>default.xsl</stylesheet>
							<fileMappers>
								<fileMapper
										implementation="org.codehaus.plexus.components.io.filemappers.FileExtensionMapper">
									<targetExtension>Default.html</targetExtension>
								</fileMapper>
							</fileMappers>
						</transformationSet>
						<transformationSet>
							<dir>${project.build.directory}/findbugs/xml</dir>
							<outputDir>${project.build.directory}/findbugs/html</outputDir>
							<stylesheet>fancy-hist.xsl</stylesheet>
							<fileMappers>
								<fileMapper
										implementation="org.codehaus.plexus.components.io.filemappers.FileExtensionMapper">
									<targetExtension>Fancy.html</targetExtension>
								</fileMapper>
							</fileMappers>
						</transformationSet>
						<transformationSet>
							<dir>${project.build.directory}/findbugs/xml</dir>
							<outputDir>${project.build.directory}/findbugs/html</outputDir>
							<stylesheet>summary.xsl</stylesheet>
							<fileMappers>
								<fileMapper
										implementation="org.codehaus.plexus.components.io.filemappers.FileExtensionMapper">
									<targetExtension>Summary.html</targetExtension>
								</fileMapper>
							</fileMappers>
						</transformationSet>
					</transformationSets>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>com.google.code.findbugs</groupId>
						<artifactId>findbugs</artifactId>
						<version>${google-findbugs-xml-dependency.version}</version>
					</dependency>
				</dependencies>
			</plugin>

			<!-- checkstyle - code analysis -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${maven-checkstyle-plugin.version}</version>
				<configuration>
					<!-- Available values: sun_checks.xml (really strict, default) | google_checks.xml (not so strict) -->
					<configLocation>google_checks.xml</configLocation>
					<enableRSS>false</enableRSS>
					<failsOnError>true</failsOnError>
					<outputFile>${project.build.directory}/checkstyle/xml/checkstyle-result.xml</outputFile>
					<outputDirectory>${project.build.directory}/checkstyle/html</outputDirectory>
				</configuration>
			</plugin>

			<!-- sonarqube - quality analysis dashboard -->
			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>${sonar-maven-plugin-manag.version}</version>
			</plugin>
		</plugins>
	</build>

	<reporting>
		<plugins>
			<!-- required by maven-surefire-report and pmd -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>${maven-jxr-plugin.version}</version>
			</plugin>
			<!-- required by maven-site -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>${maven-project-info-reports-plugin.version}</version>
			</plugin>
		</plugins>
	</reporting>

</project>
